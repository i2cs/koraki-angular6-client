/**
 * Koraki API v1.0
 * Contains public API endpoints. Invoking sequred APIs require either Bearer token (auth token created when logging in to admin UI) or Basic digest (using client id and client secret of an application). If invoked with auth token, you need to pass `applicationId` with requests to identify the application.
 *
 * OpenAPI spec version: v1.0
 * Contact: madusha@koraki.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { ApiErrorModel } from '../model/apiErrorModel';
import { IntegrationConfigurationsDataViewModel } from '../model/integrationConfigurationsDataViewModel';
import { IntegrationConfigurationsUpdateDataModel } from '../model/integrationConfigurationsUpdateDataModel';
import { IntegrationRulesDataModel } from '../model/integrationRulesDataModel';
import { SubscriptionViewModel } from '../model/subscriptionViewModel';
import { TemplateSamplePreviewViewModel } from '../model/templateSamplePreviewViewModel';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class AjaxService {

    protected basePath = 'https://localhost';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Get all subscriptions.
     * This is a public endpoint
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAllSubscriptions(observe?: 'body', reportProgress?: boolean): Observable<Array<SubscriptionViewModel>>;
    public getAllSubscriptions(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<SubscriptionViewModel>>>;
    public getAllSubscriptions(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<SubscriptionViewModel>>>;
    public getAllSubscriptions(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<SubscriptionViewModel>>(`${this.basePath}/api/v1.0/Ajax/Subscriptions`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets the integration template configs of given integration type.
     * Retrieves application id from either ApplicationId query parameter or extracted from long living token. If long living token is passed via header &#x60;Authorization: Bearer [token]&#x60;, ApplicationId query parameter is ignored.
     * @param code Integration code
     * @param applicationId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getIntegrationConfigs(code?: string, applicationId?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<IntegrationConfigurationsDataViewModel>>;
    public getIntegrationConfigs(code?: string, applicationId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<IntegrationConfigurationsDataViewModel>>>;
    public getIntegrationConfigs(code?: string, applicationId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<IntegrationConfigurationsDataViewModel>>>;
    public getIntegrationConfigs(code?: string, applicationId?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (code !== undefined && code !== null) {
            queryParameters = queryParameters.set('code', <any>code);
        }
        if (applicationId !== undefined && applicationId !== null) {
            queryParameters = queryParameters.set('ApplicationId', <any>applicationId);
        }

        let headers = this.defaultHeaders;

        // authentication (Basic) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // authentication (Bearer) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<IntegrationConfigurationsDataViewModel>>(`${this.basePath}/api/v1.0/Ajax/IntegrationConfigs`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets integration rules configs.
     * Retrieves application id from either ApplicationId query parameter or extracted from long living token. If long living token is passed via header &#x60;Authorization: Bearer [token]&#x60;, ApplicationId query parameter is ignored.
     * @param code Integration code
     * @param applicationId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getIntegrationRules(code?: string, applicationId?: string, observe?: 'body', reportProgress?: boolean): Observable<IntegrationRulesDataModel>;
    public getIntegrationRules(code?: string, applicationId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<IntegrationRulesDataModel>>;
    public getIntegrationRules(code?: string, applicationId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<IntegrationRulesDataModel>>;
    public getIntegrationRules(code?: string, applicationId?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (code !== undefined && code !== null) {
            queryParameters = queryParameters.set('code', <any>code);
        }
        if (applicationId !== undefined && applicationId !== null) {
            queryParameters = queryParameters.set('ApplicationId', <any>applicationId);
        }

        let headers = this.defaultHeaders;

        // authentication (Basic) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // authentication (Bearer) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<IntegrationRulesDataModel>(`${this.basePath}/api/v1.0/Ajax/IntegrationRules`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Render a sample values on a given template
     * Retrieves application id from either ApplicationId query parameter or extracted from long living token. If long living token is passed via header &#x60;Authorization: Bearer [token]&#x60;, ApplicationId query parameter is ignored.
     * @param template Template content
     * @param code Integration code
     * @param eventName Template event name
     * @param applicationId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getSampleTemplate(template?: string, code?: string, eventName?: string, applicationId?: string, observe?: 'body', reportProgress?: boolean): Observable<TemplateSamplePreviewViewModel>;
    public getSampleTemplate(template?: string, code?: string, eventName?: string, applicationId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TemplateSamplePreviewViewModel>>;
    public getSampleTemplate(template?: string, code?: string, eventName?: string, applicationId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TemplateSamplePreviewViewModel>>;
    public getSampleTemplate(template?: string, code?: string, eventName?: string, applicationId?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (template !== undefined && template !== null) {
            queryParameters = queryParameters.set('template', <any>template);
        }
        if (code !== undefined && code !== null) {
            queryParameters = queryParameters.set('code', <any>code);
        }
        if (eventName !== undefined && eventName !== null) {
            queryParameters = queryParameters.set('eventName', <any>eventName);
        }
        if (applicationId !== undefined && applicationId !== null) {
            queryParameters = queryParameters.set('ApplicationId', <any>applicationId);
        }

        let headers = this.defaultHeaders;

        // authentication (Basic) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // authentication (Bearer) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<TemplateSamplePreviewViewModel>(`${this.basePath}/api/v1.0/Ajax/SampleTemplate`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Create or update integration template configs.
     * Retrieves application id from either ApplicationId query parameter or extracted from long living token. If long living token is passed via header &#x60;Authorization: Bearer [token]&#x60;, ApplicationId query parameter is ignored.
     * @param model Integration template config model
     * @param code Integration code
     * @param eventName Template event name
     * @param applicationId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateIntegrationConfigs(model?: IntegrationConfigurationsUpdateDataModel, code?: string, eventName?: string, applicationId?: string, observe?: 'body', reportProgress?: boolean): Observable<IntegrationConfigurationsDataViewModel>;
    public updateIntegrationConfigs(model?: IntegrationConfigurationsUpdateDataModel, code?: string, eventName?: string, applicationId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<IntegrationConfigurationsDataViewModel>>;
    public updateIntegrationConfigs(model?: IntegrationConfigurationsUpdateDataModel, code?: string, eventName?: string, applicationId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<IntegrationConfigurationsDataViewModel>>;
    public updateIntegrationConfigs(model?: IntegrationConfigurationsUpdateDataModel, code?: string, eventName?: string, applicationId?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (code !== undefined && code !== null) {
            queryParameters = queryParameters.set('code', <any>code);
        }
        if (eventName !== undefined && eventName !== null) {
            queryParameters = queryParameters.set('eventName', <any>eventName);
        }
        if (applicationId !== undefined && applicationId !== null) {
            queryParameters = queryParameters.set('ApplicationId', <any>applicationId);
        }

        let headers = this.defaultHeaders;

        // authentication (Basic) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // authentication (Bearer) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<IntegrationConfigurationsDataViewModel>(`${this.basePath}/api/v1.0/Ajax/IntegrationConfigs`,
            model,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Create or update integration rules.
     * Retrieves application id from either ApplicationId query parameter or extracted from long living token. If long living token is passed via header &#x60;Authorization: Bearer [token]&#x60;, ApplicationId query parameter is ignored.
     * @param model Integration rules config model
     * @param code Integration code
     * @param applicationId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateIntegrationRules(model?: IntegrationRulesDataModel, code?: string, applicationId?: string, observe?: 'body', reportProgress?: boolean): Observable<IntegrationRulesDataModel>;
    public updateIntegrationRules(model?: IntegrationRulesDataModel, code?: string, applicationId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<IntegrationRulesDataModel>>;
    public updateIntegrationRules(model?: IntegrationRulesDataModel, code?: string, applicationId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<IntegrationRulesDataModel>>;
    public updateIntegrationRules(model?: IntegrationRulesDataModel, code?: string, applicationId?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (code !== undefined && code !== null) {
            queryParameters = queryParameters.set('code', <any>code);
        }
        if (applicationId !== undefined && applicationId !== null) {
            queryParameters = queryParameters.set('ApplicationId', <any>applicationId);
        }

        let headers = this.defaultHeaders;

        // authentication (Basic) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // authentication (Bearer) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<IntegrationRulesDataModel>(`${this.basePath}/api/v1.0/Ajax/IntegrationRules`,
            model,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
