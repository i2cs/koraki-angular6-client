/**
 * Koraki API v1.0
 * Contains public API endpoints. Invoking sequred APIs require either Bearer token (auth token created when logging in to admin UI) or Basic digest (using client id and client secret of an application). If invoked with auth token, you need to pass `applicationId` with requests to identify the application.
 *
 * OpenAPI spec version: v1.0
 * Contact: madusha@koraki.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { AnalyticsApplicationsCountViewDataModel } from '../model/analyticsApplicationsCountViewDataModel';
import { AnalyticsLastActivityViewDataModel } from '../model/analyticsLastActivityViewDataModel';
import { AnalyticsNotificationsCountViewDataModel } from '../model/analyticsNotificationsCountViewDataModel';
import { ApiErrorModel } from '../model/apiErrorModel';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class AnalyticsService {

    protected basePath = 'https://localhost';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Gets the application count of the authenticated user.
     * Caches the response and invalidates the cache on events of   application create and application delete
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getApplicationCount(observe?: 'body', reportProgress?: boolean): Observable<AnalyticsApplicationsCountViewDataModel>;
    public getApplicationCount(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<AnalyticsApplicationsCountViewDataModel>>;
    public getApplicationCount(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<AnalyticsApplicationsCountViewDataModel>>;
    public getApplicationCount(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<AnalyticsApplicationsCountViewDataModel>(`${this.basePath}/api/v1.0/Analytics/ApplicationCount`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets the most recent activity time of notification creation event  among all the applications of the user.
     * Caches the response and invalidates the cache on events of   notification add
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getLastActivity(observe?: 'body', reportProgress?: boolean): Observable<AnalyticsLastActivityViewDataModel>;
    public getLastActivity(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<AnalyticsLastActivityViewDataModel>>;
    public getLastActivity(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<AnalyticsLastActivityViewDataModel>>;
    public getLastActivity(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<AnalyticsLastActivityViewDataModel>(`${this.basePath}/api/v1.0/Analytics/LastActivity`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets the total notifications count of the authenticated user.
     * Caches the response and invalidates the cache on events of   application delete, notification add and notification delete
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getNotificationCount(observe?: 'body', reportProgress?: boolean): Observable<AnalyticsNotificationsCountViewDataModel>;
    public getNotificationCount(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<AnalyticsNotificationsCountViewDataModel>>;
    public getNotificationCount(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<AnalyticsNotificationsCountViewDataModel>>;
    public getNotificationCount(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<AnalyticsNotificationsCountViewDataModel>(`${this.basePath}/api/v1.0/Analytics/NotificationCount`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
